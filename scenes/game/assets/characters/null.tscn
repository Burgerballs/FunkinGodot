[gd_scene load_steps=9 format=3 uid="uid://l1dqw6ovt7lg"]

[sub_resource type="GDScript" id="GDScript_j3yvm"]
script/source = "class_name Character extends Node2D


@export var icon: Icon = Icon.new()
@export var starts_as_player: bool = false

@export var dance_steps: Array[StringName] = [&'idle']
@export_range(0.0, 1024.0, 0.01) var sing_steps: float = 4.0
var _dance_step: int = 0

@onready var _camera_offset: Node2D = $camera_offset
@onready var _animation_player: AnimationPlayer = $animation_player

var _is_player: bool = false
var _animation: StringName = &''
var _singing: bool = false
var _sing_timer: float = 0.0
var _in_special_anim: bool = false


func _ready() -> void:
	dance(true)


func play_anim(anim: StringName, force: bool = false, special: bool = false) -> void:
	if _in_special_anim and _animation_player.is_playing():
		return
	if not _animation_player.has_animation(anim):
		return
	
	_animation = anim
	_singing = _animation.begins_with('sing_')
	
	if _animation_player.current_animation == anim and force:
		_animation_player.seek(0.0, true)
		return
	
	_animation_player.play(anim)
	_in_special_anim = special


func has_anim(anim: StringName) -> bool:
	return _animation_player.has_animation(anim)


func sing(note: Note, force: bool = false) -> void:
	_sing_timer = 0.0
	
	const swapped: PackedStringArray = [&'left', &'right']
	var direction: StringName = Note.directions[absi(note.data.direction) % 
			Note.directions.size()]
	
	if _is_player != starts_as_player and swapped.has(direction):
		direction = swapped[wrapi(swapped.find(direction) + 1, 0, swapped.size())]
	
	if (not note.sing_suffix.is_empty()) and \\
			has_anim('sing_%s%s' % [direction.to_lower(), note.sing_suffix]):
		play_anim('sing_%s%s' % [direction.to_lower(), note.sing_suffix], force)
	else:
		play_anim('sing_%s' % direction.to_lower(), force)


func sing_miss(note: Note, force: bool = false) -> void:
	_sing_timer = 0.0
	
	const swapped: PackedStringArray = [&'left', &'right']
	var direction: StringName = Note.directions[absi(note.data.direction) % 
			Note.directions.size()]
	
	if _is_player != starts_as_player and swapped.has(direction):
		direction = swapped[wrapi(swapped.find(direction) + 1, 0, swapped.size())]
	
	play_anim('sing_%s_miss' % direction.to_lower(), force)


func dance(force: bool = false) -> void:
	if _singing and not force:
		return
	if dance_steps.is_empty():
		return
	if dance_steps.size() > 1:
		_dance_step = wrapi(_dance_step + 1, 0, dance_steps.size())
		play_anim(dance_steps[_dance_step], force)
		return
	
	play_anim(dance_steps[0], force)


func _process(delta: float) -> void:
	if _singing:
		_sing_timer += delta * Conductor.beat_delta
		
		if _sing_timer * 4.0 >= sing_steps or sing_steps <= 0.0:
			dance(true)
"

[sub_resource type="Animation" id="Animation_bgpi6"]
length = 0.001

[sub_resource type="Animation" id="Animation_ud1jc"]
resource_name = "idle"
length = 0.500004
step = 0.0416667

[sub_resource type="Animation" id="Animation_wgt05"]
resource_name = "sing_down"
length = 0.500004
step = 0.0416667

[sub_resource type="Animation" id="Animation_0v5yh"]
resource_name = "sing_left"
length = 0.500004
step = 0.0416667

[sub_resource type="Animation" id="Animation_2i71f"]
resource_name = "sing_right"
length = 0.500004
step = 0.0416667

[sub_resource type="Animation" id="Animation_m87l6"]
resource_name = "sing_up"
length = 0.500004
step = 0.0416667

[sub_resource type="AnimationLibrary" id="AnimationLibrary_mki60"]
_data = {
"RESET": SubResource("Animation_bgpi6"),
"idle": SubResource("Animation_ud1jc"),
"sing_down": SubResource("Animation_wgt05"),
"sing_left": SubResource("Animation_0v5yh"),
"sing_right": SubResource("Animation_2i71f"),
"sing_up": SubResource("Animation_m87l6")
}

[node name="null" type="Node2D"]
script = SubResource("GDScript_j3yvm")

[node name="animation_player" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_mki60")
}

[node name="camera_offset" type="Node2D" parent="."]
